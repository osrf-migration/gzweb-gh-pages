{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebojs.json"}, "html": {"href": "#!/osrf/gazebojs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{762c6281-de25-4619-9c70-213ccace6fe9}ts=default"}}, "type": "repository", "name": "gazebojs", "full_name": "osrf/gazebojs", "uuid": "{762c6281-de25-4619-9c70-213ccace6fe9}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebojs/issues/4/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebojs/issues/4.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebojs/issues/4/watch"}, "comments": {"href": "data/repositories/osrf/gazebojs/issues/4/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebojs/issues/4/subscription-works-for-a-single-message"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebojs/issues/4/vote"}}, "reporter": {"display_name": "Hugo Boyer", "uuid": "{3d87874e-7099-4981-b04f-57f0272faa7d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d87874e-7099-4981-b04f-57f0272faa7d%7D"}, "html": {"href": "https://bitbucket.org/%7B3d87874e-7099-4981-b04f-57f0272faa7d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/21198da8539b599e3633017f5f5f8150d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsHB-6.png"}}, "nickname": "hugomatic", "type": "user", "account_id": "557058:869c02bb-b246-4cdc-9db3-0064e8add185"}, "title": "subscription works for a single message", "component": null, "votes": 0, "watches": 0, "content": {"raw": "The callback is not invoked afterwards. \r\n\r\nThis problem only happens on certain machines. To try to reproduce, setup a cemera in Gazebo and run the  save_jpeg example.\r\n\r\nNOTE: \r\n\r\nI am not sure what causes the problem, but it looks like it can be circumvented if the gazebo instance is used in the loop at the end. It looks like the garbage collector is trying to delete the gazebo instance prematurely. The following code hides the problem:\r\n\r\n\r\n\r\n```\r\n#!python\r\n\r\nconsole.log('setup a loop with 5 sec interval tick');\r\nsetInterval(function (){\r\n  console.log('tick');\r\n \r\n  // ADD THIS LINE TO HIDE THE PROBLEM\r\n  var x = gazebo;\r\n\r\n},1000);\r\n\r\n```\r\n\r\n", "markup": "markdown", "html": "<p>The callback is not invoked afterwards. </p>\n<p>This problem only happens on certain machines. To try to reproduce, setup a cemera in Gazebo and run the  save_jpeg example.</p>\n<p>NOTE: </p>\n<p>I am not sure what causes the problem, but it looks like it can be circumvented if the gazebo instance is used in the loop at the end. It looks like the garbage collector is trying to delete the gazebo instance prematurely. The following code hides the problem:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;setup a loop with 5 sec interval tick&#39;</span><span class=\"p\">);</span>\n<span class=\"n\">setInterval</span><span class=\"p\">(</span><span class=\"n\">function</span> <span class=\"p\">(){</span>\n  <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;tick&#39;</span><span class=\"p\">);</span>\n\n  <span class=\"o\">//</span> <span class=\"n\">ADD</span> <span class=\"n\">THIS</span> <span class=\"n\">LINE</span> <span class=\"n\">TO</span> <span class=\"n\">HIDE</span> <span class=\"n\">THE</span> <span class=\"n\">PROBLEM</span>\n  <span class=\"n\">var</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">gazebo</span><span class=\"p\">;</span>\n\n<span class=\"p\">},</span><span class=\"mi\">1000</span><span class=\"p\">);</span>\n</pre></div>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2014-10-06T22:04:41.257617+00:00", "milestone": null, "updated_on": "2014-11-19T23:47:52.029024+00:00", "type": "issue", "id": 4}