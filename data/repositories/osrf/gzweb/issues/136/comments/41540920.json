{"links": {"self": {"href": "data/repositories/osrf/gzweb/issues/136/comments/41540920.json"}, "html": {"href": "#!/osrf/gzweb/issues/136#comment-41540920"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gzweb/issues/136.json"}}, "type": "issue", "id": 136, "repository": {"links": {"self": {"href": "data/repositories/osrf/gzweb.json"}, "html": {"href": "#!/osrf/gzweb"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e2fc3f2-dc25-453b-9792-943c743d9b40}ts=1609263"}}, "type": "repository", "name": "gzweb", "full_name": "osrf/gzweb", "uuid": "{3e2fc3f2-dc25-453b-9792-943c743d9b40}"}, "title": "globalEmitter variable shouldn't be global"}, "content": {"raw": "There are 4 `EventEmitter`s being instantiated at the moment; besides `guiEvents` there are `gui.emitter`, `iface.emitter` and `scene.emitter`. And classes are using each other's emitters all over the place.\n\nIt looks to me that we could get away with one emitter which is used by everyone, kind of how `guiEvents` is being used, but a bit more structured. I'm thinking of something analogous to Gazebo transport's pub/sub, eventually it could become the only communication between classes, so they're truly independent.\n\nThe usage would be as follows for example. The emitter is instantiated before other classes, and each class which requires communication would take it as an argument on the constructor:\n\n~~~\nvar emitter = new EventEmitter2({ verbose: true });\nvar scene = new GZ3D.Scene(emitter);\nvar gui = new GZ3D.Gui(emitter);\nvar iface = new GZ3D.GZIface(emitter);\nvar sdfparser = new GZ3D.SdfParser(emitter);\n~~~\n\nThe emitter would be optional, so that classes can be used in isolation too. It would become repetitive wrap every call to the emitter with an `if (this.emitter !== undefined)`, so one idea is to always create a new emitter if one isn't provided, for example:\n\n~~~\nGZ3D.Gui = function(emitter)\n{\n  this.emitter = emitter || new EventEmitter2({verbose: true});\n  ...\n};\n~~~\n\nI'm going to work on a prototype as a proposal.\n\nRelated to issue #140", "markup": "markdown", "html": "<p>There are 4 <code>EventEmitter</code>s being instantiated at the moment; besides <code>guiEvents</code> there are <code>gui.emitter</code>, <code>iface.emitter</code> and <code>scene.emitter</code>. And classes are using each other's emitters all over the place.</p>\n<p>It looks to me that we could get away with one emitter which is used by everyone, kind of how <code>guiEvents</code> is being used, but a bit more structured. I'm thinking of something analogous to Gazebo transport's pub/sub, eventually it could become the only communication between classes, so they're truly independent.</p>\n<p>The usage would be as follows for example. The emitter is instantiated before other classes, and each class which requires communication would take it as an argument on the constructor:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">var</span> <span class=\"nt\">emitter</span> <span class=\"o\">=</span> <span class=\"nt\">new</span> <span class=\"nt\">EventEmitter2</span><span class=\"o\">(</span><span class=\"p\">{</span> <span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"n\">true</span> <span class=\"p\">}</span><span class=\"o\">);</span>\n<span class=\"nt\">var</span> <span class=\"nt\">scene</span> <span class=\"o\">=</span> <span class=\"nt\">new</span> <span class=\"nt\">GZ3D</span><span class=\"p\">.</span><span class=\"nc\">Scene</span><span class=\"o\">(</span><span class=\"nt\">emitter</span><span class=\"o\">);</span>\n<span class=\"nt\">var</span> <span class=\"nt\">gui</span> <span class=\"o\">=</span> <span class=\"nt\">new</span> <span class=\"nt\">GZ3D</span><span class=\"p\">.</span><span class=\"nc\">Gui</span><span class=\"o\">(</span><span class=\"nt\">emitter</span><span class=\"o\">);</span>\n<span class=\"nt\">var</span> <span class=\"nt\">iface</span> <span class=\"o\">=</span> <span class=\"nt\">new</span> <span class=\"nt\">GZ3D</span><span class=\"p\">.</span><span class=\"nc\">GZIface</span><span class=\"o\">(</span><span class=\"nt\">emitter</span><span class=\"o\">);</span>\n<span class=\"nt\">var</span> <span class=\"nt\">sdfparser</span> <span class=\"o\">=</span> <span class=\"nt\">new</span> <span class=\"nt\">GZ3D</span><span class=\"p\">.</span><span class=\"nc\">SdfParser</span><span class=\"o\">(</span><span class=\"nt\">emitter</span><span class=\"o\">);</span>\n</pre></div>\n\n\n<p>The emitter would be optional, so that classes can be used in isolation too. It would become repetitive wrap every call to the emitter with an <code>if (this.emitter !== undefined)</code>, so one idea is to always create a new emitter if one isn't provided, for example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">GZ3D</span><span class=\"p\">.</span><span class=\"nc\">Gui</span> <span class=\"o\">=</span> <span class=\"nt\">function</span><span class=\"o\">(</span><span class=\"nt\">emitter</span><span class=\"o\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"err\">this.emitter</span> <span class=\"err\">=</span> <span class=\"err\">emitter</span> <span class=\"err\">||</span> <span class=\"err\">new</span> <span class=\"err\">EventEmitter2({</span><span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"n\">true</span><span class=\"p\">}</span><span class=\"o\">);</span>\n  <span class=\"o\">...</span>\n<span class=\"err\">}</span><span class=\"o\">;</span>\n</pre></div>\n\n\n<p>I'm going to work on a prototype as a proposal.</p>\n<p>Related to issue <a href=\"#!/osrf/gzweb/issues/140/decouple-iface-and-gui\" rel=\"nofollow\" title=\"Decouple Iface and Gui\" class=\"ap-connect-link\"><s>#140</s></a></p>", "type": "rendered"}, "created_on": "2017-11-30T18:48:05.947638+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": null, "type": "issue_comment", "id": 41540920}