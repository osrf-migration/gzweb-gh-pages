{"priority": "major", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/osrf/gzweb.json"}, "html": {"href": "#!/osrf/gzweb"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e2fc3f2-dc25-453b-9792-943c743d9b40}ts=1609263"}}, "type": "repository", "name": "gzweb", "full_name": "osrf/gzweb", "uuid": "{3e2fc3f2-dc25-453b-9792-943c743d9b40}"}, "links": {"attachments": {"href": "data/repositories/osrf/gzweb/issues/145/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gzweb/issues/145.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gzweb/issues/145/watch"}, "comments": {"href": "data/repositories/osrf/gzweb/issues/145/comments_page=1.json"}, "html": {"href": "#!/osrf/gzweb/issues/145/naming-scheme-for-concatenated-files"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gzweb/issues/145/vote"}}, "reporter": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "title": "Naming scheme for concatenated files", "component": null, "votes": 0, "watches": 1, "content": {"raw": "So far, GzWeb has produced a single concatenated file: `gz3d.js`, which contains all the files under the `gz3d/src` folder in alphabetical order. We also produce its minified version.\r\n\r\nAs we move towards embedding GzWeb into other projects, it would be useful to offer other combinations of files for different use cases.\r\n\r\nI propose the following convention:\r\n\r\n* `.full` means the file contains all necessary dependencies\r\n* `.iface` means the file contains `gziface`, the websocket interface to the backend\r\n* `.gui` means the file contains `gzgui` and `gzradialmenu`, the jQuery, AngularJS and sprites menus\r\n* The absence of both `.iface` and `.gui` means they're both included - confusing?\r\n* `.min` Minified version, there is one for each file\r\n\r\n## Some use cases\r\n\r\n### User wants to have control over what dependencies they're including\r\n\r\nInclude individual `src/gz*.js` files or `gz3d.js` and hand-pick dependencies.\r\n\r\nWe don't guarantee that a missing dependency will be properly handled though, so for example, if the user doesn't include the `STLLoader` but tries to load an STL file, that will cause an error.\r\n\r\n### User wants to embed a simulation scene into their site, but use their own UI elements instead of the ones provided by GzWeb\r\n\r\n`gz3d.iface.full.js` - This is introduced on pull request #153\r\n\r\n### User wants to use GzWeb as a serverless SDF viewer (issue #107) with their own UI elements\r\n\r\n`gz3d.full.js` - That would be what pull request #141 calls `SDFViewer.js`\r\n\r\n\r\nThese are all just ideas, I'm not sold on any of them yet.", "markup": "markdown", "html": "<p>So far, GzWeb has produced a single concatenated file: <code>gz3d.js</code>, which contains all the files under the <code>gz3d/src</code> folder in alphabetical order. We also produce its minified version.</p>\n<p>As we move towards embedding GzWeb into other projects, it would be useful to offer other combinations of files for different use cases.</p>\n<p>I propose the following convention:</p>\n<ul>\n<li><code>.full</code> means the file contains all necessary dependencies</li>\n<li><code>.iface</code> means the file contains <code>gziface</code>, the websocket interface to the backend</li>\n<li><code>.gui</code> means the file contains <code>gzgui</code> and <code>gzradialmenu</code>, the jQuery, AngularJS and sprites menus</li>\n<li>The absence of both <code>.iface</code> and <code>.gui</code> means they're both included - confusing?</li>\n<li><code>.min</code> Minified version, there is one for each file</li>\n</ul>\n<h2 id=\"markdown-header-some-use-cases\">Some use cases</h2>\n<h3 id=\"markdown-header-user-wants-to-have-control-over-what-dependencies-theyre-including\">User wants to have control over what dependencies they're including</h3>\n<p>Include individual <code>src/gz*.js</code> files or <code>gz3d.js</code> and hand-pick dependencies.</p>\n<p>We don't guarantee that a missing dependency will be properly handled though, so for example, if the user doesn't include the <code>STLLoader</code> but tries to load an STL file, that will cause an error.</p>\n<h3 id=\"markdown-header-user-wants-to-embed-a-simulation-scene-into-their-site-but-use-their-own-ui-elements-instead-of-the-ones-provided-by-gzweb\">User wants to embed a simulation scene into their site, but use their own UI elements instead of the ones provided by GzWeb</h3>\n<p><code>gz3d.iface.full.js</code> - This is introduced on <a href=\"#!/osrf/gzweb/pull-requests/153/embeddable-gz3d\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #153</a></p>\n<h3 id=\"markdown-header-user-wants-to-use-gzweb-as-a-serverless-sdf-viewer-issue-107-with-their-own-ui-elements\">User wants to use GzWeb as a serverless SDF viewer (issue <a href=\"#!/osrf/gzweb/issues/107/allow-gzweb-to-work-as-a-headless\" rel=\"nofollow\" title=\"Allow gzweb to work as a headless sdfParser [doesn&#39;t need a server]\" class=\"ap-connect-link\"><s>#107</s></a>) with their own UI elements</h3>\n<p><code>gz3d.full.js</code> - That would be what <a href=\"#!/osrf/gzweb/pull-requests/141/reusable-gzweb\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #141</a> calls <code>SDFViewer.js</code></p>\n<p>These are all just ideas, I'm not sold on any of them yet.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-12-19T02:28:25.127815+00:00", "milestone": null, "updated_on": "2018-01-04T00:27:18.833768+00:00", "type": "issue", "id": 145}