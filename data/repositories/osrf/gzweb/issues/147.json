{"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/osrf/gzweb.json"}, "html": {"href": "#!/osrf/gzweb"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e2fc3f2-dc25-453b-9792-943c743d9b40}ts=1609263"}}, "type": "repository", "name": "gzweb", "full_name": "osrf/gzweb", "uuid": "{3e2fc3f2-dc25-453b-9792-943c743d9b40}"}, "links": {"attachments": {"href": "data/repositories/osrf/gzweb/issues/147/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gzweb/issues/147.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gzweb/issues/147/watch"}, "comments": {"href": "data/repositories/osrf/gzweb/issues/147/comments_page=1.json"}, "html": {"href": "#!/osrf/gzweb/issues/147/resource-paths"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gzweb/issues/147/vote"}}, "reporter": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "title": "Resource paths", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Until recently, GzWeb could only handle resources (models, meshes, textures...) which were served by itself, under the `/assets` route.\r\n\r\nSince pull request #153, it became possible to load resources served by another GzWeb backend, but still relying on the `/assets` route.\r\n\r\nPull request #149 (i.e. pull request #141) adds a generic way to load models from any URL, the caveat is that the complete list of resources to be used needs to be known before attempting to load the model.\r\n\r\nI think that ideally, we would support passing the URL of an SDF file, and automatically discovering the URLs of all resources it needs, similar to how gzclient does it. For example:\r\n\r\n~~~\r\nsdfparser.addModelPath(<url>);\r\nsdfparser.addModelPath(<another_url>);\r\nsdfparser.loadSdf(<sdf_url>);\r\n~~~", "markup": "markdown", "html": "<p>Until recently, GzWeb could only handle resources (models, meshes, textures...) which were served by itself, under the <code>/assets</code> route.</p>\n<p>Since <a href=\"#!/osrf/gzweb/pull-requests/153/embeddable-gz3d\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #153</a>, it became possible to load resources served by another GzWeb backend, but still relying on the <code>/assets</code> route.</p>\n<p><a href=\"#!/osrf/gzweb/pull-requests/149/continuing-pull-request-141-sdf-viewer\" rel=\"nofollow\" class=\"ap-connect-link\">Pull request #149</a> (i.e. <a href=\"#!/osrf/gzweb/pull-requests/141/reusable-gzweb\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #141</a>) adds a generic way to load models from any URL, the caveat is that the complete list of resources to be used needs to be known before attempting to load the model.</p>\n<p>I think that ideally, we would support passing the URL of an SDF file, and automatically discovering the URLs of all resources it needs, similar to how gzclient does it. For example:</p>\n<div class=\"codehilite\"><pre><span></span>sdfparser.addModelPath(&lt;url&gt;);\nsdfparser.addModelPath(&lt;another_url&gt;);\nsdfparser.loadSdf(&lt;sdf_url&gt;);\n</pre></div>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-01-05T01:45:09.766314+00:00", "milestone": null, "updated_on": "2018-01-05T01:45:09.766314+00:00", "type": "issue", "id": 147}