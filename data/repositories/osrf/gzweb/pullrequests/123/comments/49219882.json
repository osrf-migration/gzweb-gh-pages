{"links": {"self": {"href": "data/repositories/osrf/gzweb/pullrequests/123/comments/49219882.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gzweb/diff/mohamd_ayman/gzweb:7e605fdee2ac..576579ae7349?path=gz3d%2Fsrc%2Fgzscene.js"}, "html": {"href": "#!/osrf/gzweb/pull-requests/123/_/diff#comment-49219882"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 123, "links": {"self": {"href": "data/repositories/osrf/gzweb/pullrequests/123.json"}, "html": {"href": "#!/osrf/gzweb/pull-requests/123"}}, "title": "View com"}, "content": {"raw": "There are a few problems with the math here:\n\n* The Z axis is being given special treatment, but we should account for rotations on all axes\n* This is setting the child's (link) local rotation with respect to the parent (model). If the model is not aligned with the world, we need to take that into account too. \n\nYou can easily see what's going on by commenting out the line which rotates the link back to its original rotation, and you'll see that the link is not properly aligned with the world the moment we take the bounding box.\n\nTry out this patch:\n\n~~~\ndiff -r 7e605fdee2ac gz3d/src/gzscene.js\n--- a/gz3d/src/gzscene.js\tWed Nov 08 06:55:31 2017 +0800\n+++ b/gz3d/src/gzscene.js\tThu Nov 09 09:20:57 2017 -0800\n@@ -2411,17 +2411,19 @@\n \n         COMVisual.crossLines = [];\n \n-        // align the link with z axis and calculate its bounding box\n+        // Store link's original rotation (w.r.t. the model)\n         var originalRotation = new THREE.Euler();\n-        var rot = new THREE.Euler();\n+        originalRotation.copy(child.rotation);\n+\n+        // Align link with world (reverse parent rotation w.r.t. the world)\n+        child.setRotationFromMatrix(\n+            new THREE.Matrix4().getInverse(child.parent.matrixWorld));\n+\n+        // Get its bounding box\n         box = new THREE.Box3();\n-        originalRotation.copy(child.rotation);\n-        rot.copy(child.rotation);\n-        rot.set(0, 0, -originalRotation.z, 0);\n-        child.setRotationFromEuler(rot);\n-\n         box.setFromObject(child);\n \n+        // Rotate link back to its original rotation\n         child.setRotationFromEuler(originalRotation);\n \n         // w.r.t child\n~~~\n\nBy setting the link's rotation to be the reverse of the parent's rotation in the world, we're addressing the 2 points above, see the results with many orientations:\n\n![pendrot.png](data/bitbucket.org/repo/r77Gja/images/3383266079-pendrot.png)", "markup": "markdown", "html": "<p>There are a few problems with the math here:</p>\n<ul>\n<li>The Z axis is being given special treatment, but we should account for rotations on all axes</li>\n<li>This is setting the child's (link) local rotation with respect to the parent (model). If the model is not aligned with the world, we need to take that into account too. </li>\n</ul>\n<p>You can easily see what's going on by commenting out the line which rotates the link back to its original rotation, and you'll see that the link is not properly aligned with the world the moment we take the bounding box.</p>\n<p>Try out this patch:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff -r 7e605fdee2ac gz3d/src/gzscene.js</span>\n<span class=\"gd\">--- a/gz3d/src/gzscene.js   Wed Nov 08 06:55:31 2017 +0800</span>\n<span class=\"gi\">+++ b/gz3d/src/gzscene.js   Thu Nov 09 09:20:57 2017 -0800</span>\n<span class=\"gu\">@@ -2411,17 +2411,19 @@</span>\n\n         COMVisual.crossLines = [];\n\n<span class=\"gd\">-        // align the link with z axis and calculate its bounding box</span>\n<span class=\"gi\">+        // Store link&#39;s original rotation (w.r.t. the model)</span>\n         var originalRotation = new THREE.Euler();\n<span class=\"gd\">-        var rot = new THREE.Euler();</span>\n<span class=\"gi\">+        originalRotation.copy(child.rotation);</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+        // Align link with world (reverse parent rotation w.r.t. the world)</span>\n<span class=\"gi\">+        child.setRotationFromMatrix(</span>\n<span class=\"gi\">+            new THREE.Matrix4().getInverse(child.parent.matrixWorld));</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+        // Get its bounding box</span>\n         box = new THREE.Box3();\n<span class=\"gd\">-        originalRotation.copy(child.rotation);</span>\n<span class=\"gd\">-        rot.copy(child.rotation);</span>\n<span class=\"gd\">-        rot.set(0, 0, -originalRotation.z, 0);</span>\n<span class=\"gd\">-        child.setRotationFromEuler(rot);</span>\n<span class=\"gd\">-</span>\n         box.setFromObject(child);\n\n<span class=\"gi\">+        // Rotate link back to its original rotation</span>\n         child.setRotationFromEuler(originalRotation);\n\n         // w.r.t child\n</pre></div>\n\n\n<p>By setting the link's rotation to be the reverse of the parent's rotation in the world, we're addressing the 2 points above, see the results with many orientations:</p>\n<p><img alt=\"pendrot.png\" src=\"data/bitbucket.org/repo/r77Gja/images/3383266079-pendrot.png\" /></p>", "type": "rendered"}, "created_on": "2017-11-09T17:21:18.298317+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {"to": 2542, "from": null, "outdated": true, "path": "gz3d/src/gzscene.js"}, "updated_on": "2017-11-09T17:21:18.301557+00:00", "type": "pullrequest_comment", "id": 49219882}